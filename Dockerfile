# build frontend
FROM node:8

RUN mkdir /web
WORKDIR /web

# install deps
COPY ./web/package.json ./package.json
COPY ./web/yarn.lock ./yarn.lock
RUN yarn install

# build app
COPY ./web/src ./src
COPY ./web/public ./public
RUN yarn build

# prepare a directory of assets that will be exported into the server build
# these are generated by yarn build
RUN mkdir -p ./export_assets/static/js
RUN mkdir -p ./export_assets/static/css
RUN mkdir -p ./export_assets/static/media
RUN cp ./build/static/js/main.*.js ./export_assets/static/js/main.js
RUN cp ./build/static/css/main.*.css ./export_assets/static/css/main.css
# uncomment if there's media/icons
#RUN cp ./build/static/media/* ./export_assets/static/media
RUN cp ./public/manifest.json ./export_assets/static/manifest.json

# these are human generated
COPY ./assets/favicon.ico ./export_assets/favicon.ico
COPY ./assets/main.html ./export_assets/main.html
COPY ./assets/robots.txt ./export_assets/robots.txt

# save the git hash of this build
COPY ./.git ./.git
RUN git rev-parse HEAD > ./export_assets/__web_commit.txt
RUN rm -rf ./.git


# build the backend
FROM rust:1.36

# create a new empty shell
RUN USER=root cargo new --bin transfer
WORKDIR /transfer

# copy over your manifests
COPY ./Cargo.lock ./Cargo.lock
COPY ./Cargo.toml ./Cargo.toml
COPY ./Migrant.toml ./Migrant.toml

# this build step will cache your dependencies
RUN cargo build --release
RUN rm src/*.rs

# copy all source files
COPY ./src ./src

# build for release
RUN rm ./target/release/deps/transfer*
RUN cargo build --release

# copy all static files
COPY ./migrations ./migrations

# copy frontend assets
COPY --from=0 /web/export_assets ./assets

# pull in configs
COPY ./config.ron ./config.ron

# save git hash of this build
COPY ./.git ./.git
RUN git rev-parse HEAD > ./assets/__server_commit.txt
RUN rm -rf ./.git

RUN mkdir ./bin
RUN cp ./target/release/transfer ./bin/transfer
RUN rm -rf ./target

# set the startup command to run your binary
CMD ["./bin/transfer", "serve"]
